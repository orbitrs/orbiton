name: Orbiton CLI Release

# Simplified release workflow for orbiton crate only
# Does NOT handle documentation deployment
# Binary artifacts are handled by the workspace-level release workflow

on:
  workflow_dispatch:
    inputs:
      publish-crate:
        description: 'Publish orbiton crate to crates.io'
        type: boolean
        default: false
      dry-run:
        description: 'Perform a dry run without publishing'
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfontconfig1-dev libfreetype6-dev

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> target
          cache-on-failure: true

      - name: Run tests
        working-directory: orbiton
        run: |
          cargo test --all-features
          cargo test --doc

      - name: Check package
        working-directory: orbiton
        run: cargo package --allow-dirty

      - name: Test CLI functionality
        working-directory: orbiton
        run: |
          cargo build --release
          ./target/release/orbiton --help
          ./target/release/orbiton --version

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.publish-crate == 'true' && github.event.inputs.dry-run == 'false'
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfontconfig1-dev libfreetype6-dev

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> target
          cache-on-failure: true

      - name: Check if version exists
        id: check-version
        working-directory: orbiton
        run: |
          CRATE_NAME="orbiton"
          VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].version')
          
          RESPONSE=$(curl -s "https://crates.io/api/v1/crates/$CRATE_NAME/$VERSION")
          if echo "$RESPONSE" | grep -q "\"version\""; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "::error::Crate $CRATE_NAME version $VERSION already exists on crates.io"
            exit 1
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version $VERSION is available for publishing"
          fi

      - name: Publish crate
        working-directory: orbiton
        run: cargo publish --token ${{ secrets.CRATES_TOKEN }}
