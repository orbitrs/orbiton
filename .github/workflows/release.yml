name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:
    inputs:
      publish-crate:
        description: 'Whether to publish to crates.io'
        required: false
        type: boolean
        default: false
      build-docs:
        description: 'Whether to build and publish documentation'
        required: false
        type: boolean
        default: false
      cross-platform-artifacts:
        description: 'Whether to build artifacts for multiple platforms'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read
  pull-requests: read
  id-token: write

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.content }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: version
        run: echo "version=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT
      
      - name: Extract Changelog
        id: changelog
        run: |
          VERSION="v${{ steps.version.outputs.version }}"
          
          # Try to extract changelog between this version and the previous one
          CONTENT=$(awk -v version="$VERSION" '
            BEGIN { output = ""; capturing = 0; }
            $0 ~ "^## " version { capturing = 1; next; }
            /^## / && capturing { exit; }
            capturing { output = output $0 "\n"; }
            END { print output; }' CHANGELOG.md)
          
          # If not found, try without the v prefix
          if [ -z "$CONTENT" ]; then
            VERSION="${VERSION#v}"
            CONTENT=$(awk -v version="$VERSION" '
              BEGIN { output = ""; capturing = 0; }
              $0 ~ "^## " version { capturing = 1; next; }
              /^## / && capturing { exit; }
              capturing { output = output $0 "\n"; }
              END { print output; }' CHANGELOG.md)
          fi
          
          # Format for GitHub Actions output
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: prepare
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && inputs.publish-crate)
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Check if crate exists and handle publishing
        run: |
          CRATE_NAME=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].name')
          VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].version')
          
          # Check if the crate with this version already exists
          RESPONSE=$(curl -s "https://crates.io/api/v1/crates/$CRATE_NAME/$VERSION")
          if echo "$RESPONSE" | grep -q "\"version\""; then
            echo "::warning::Crate $CRATE_NAME version $VERSION already exists on crates.io. Skipping publish."
          else
            echo "Publishing $CRATE_NAME version $VERSION to crates.io..."
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
          fi

  docs:
    name: Build & Publish Docs
    runs-on: ubuntu-latest
    needs: prepare
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && inputs.build-docs)
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build documentation
        run: cargo doc --no-deps --document-private-items
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ github.token }}
          publish_dir: ./target/doc

  artifacts:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: prepare
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && inputs.cross-platform-artifacts)
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> target
          key: ${{ matrix.target }}
      
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfontconfig1-dev libfreetype6-dev
      
      - name: Build for ${{ matrix.name }}
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-${{ needs.prepare.outputs.version }}
          path: target/${{ matrix.target }}/release/*
          if-no-files-found: error
  
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, artifacts]
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && inputs.cross-platform-artifacts)
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: Release v${{ needs.prepare.outputs.version }}
          body: ${{ needs.prepare.outputs.changelog }}
          files: artifacts/**/*
          draft: false
          prerelease: false
