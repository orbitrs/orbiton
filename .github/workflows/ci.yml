name: CI

# Custom workflow to handle dependencies on orbitrs and orbit-analyzer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  pull-requests: read
  id-token: write # This is required for requesting the JWT

jobs:
  check:
    name: Format & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      # Create workspace directory
      - name: Create workspace directory
        run: |
          mkdir -p orbitrs-workspace
      
      # Checkout orbiton
      - name: Checkout orbiton
        uses: actions/checkout@v4
        with:
          path: orbitrs-workspace/orbiton
          fetch-depth: 1

      # Checkout dependencies
      - name: Checkout orbitrs
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbitrs
          path: orbitrs-workspace/orbitrs
          
      - name: Checkout orbit-analyzer
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbit-analyzer
          path: orbitrs-workspace/orbit-analyzer
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfontconfig1-dev libfreetype6-dev
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            orbitrs-workspace/orbiton -> target
            orbitrs-workspace/orbitrs -> target
            orbitrs-workspace/orbit-analyzer -> target
            
      - name: Verify dependency paths
        run: |
          echo "Verifying that dependencies can be found at the expected paths"
          if [ -f "orbitrs-workspace/orbitrs/Cargo.toml" ]; then
            echo "orbitrs/Cargo.toml found!"
          else
            echo "ERROR: orbitrs/Cargo.toml not found"
            exit 1
          fi
          
          if [ -f "orbitrs-workspace/orbit-analyzer/Cargo.toml" ]; then
            echo "orbit-analyzer/Cargo.toml found!"
          else
            echo "ERROR: orbit-analyzer/Cargo.toml not found"
            exit 1
          fi
            
      - name: Check code formatting
        working-directory: orbitrs-workspace/orbiton
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        working-directory: orbitrs-workspace/orbiton
        run: |
          # Use CI feature to handle dependency paths in CI environment
          cargo clippy --features ci --all-targets -- -D warnings
        
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: check
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
      fail-fast: false
    steps:
      - name: Create workspace directory
        run: mkdir -p $GITHUB_WORKSPACE/orbitrs-workspace
      
      - name: Checkout orbiton
        uses: actions/checkout@v4
        with:
          path: orbitrs-workspace/orbiton
      
      - name: Checkout orbitrs
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbitrs
          path: orbitrs-workspace/orbitrs
          
      - name: Checkout orbit-analyzer
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbit-analyzer
          path: orbitrs-workspace/orbit-analyzer
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfontconfig1-dev libfreetype6-dev
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            orbitrs-workspace/orbiton -> target
            
      - name: Run tests
        working-directory: orbitrs-workspace/orbiton
        run: |
          # Use CI feature instead of all-features
          cargo test --features ci
        
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: check
    timeout-minutes: 15
    steps:
      - name: Create workspace directory
        run: mkdir -p $GITHUB_WORKSPACE/orbitrs-workspace
      
      - name: Checkout orbiton
        uses: actions/checkout@v4
        with:
          path: orbitrs-workspace/orbiton
      
      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit
      
      - name: Run security audit
        working-directory: orbitrs-workspace/orbiton
        run: |
          # Use CI feature for dependency resolution
          cargo audit --features ci
        
  outdated-dependencies:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    needs: check
    timeout-minutes: 15
    steps:
      - name: Create workspace directory
        run: mkdir -p $GITHUB_WORKSPACE/orbitrs-workspace
      
      - name: Checkout orbiton
        uses: actions/checkout@v4
        with:
          path: orbitrs-workspace/orbiton
      
      - name: Checkout orbitrs
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbitrs
          path: orbitrs-workspace/orbitrs
          
      - name: Checkout orbit-analyzer
        uses: actions/checkout@v4
        with:
          repository: orbitrs/orbit-analyzer
          path: orbitrs-workspace/orbit-analyzer
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-outdated
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-outdated
      
      - name: Check for outdated dependencies
        working-directory: orbitrs-workspace/orbiton
        run: |
          # Use CI feature for dependency resolution
          cargo outdated --features ci --exit-code 0